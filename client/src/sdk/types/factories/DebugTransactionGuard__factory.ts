/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DebugTransactionGuard,
  DebugTransactionGuardInterface,
} from "../DebugTransactionGuard";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "GasUsage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "safeTxGas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "usesRefund",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "TransactionDetails",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "checkAfterExecution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "safeTxGas",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseGas",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "gasToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "refundReceiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "checkTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "txNonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610554908161001c8239f35b600080fdfe6080806040526004908136101561001f575b50503461001a57005b600080fd5b60003560e01c90816301ffc9a7146103c95750806375f0bb521461013257806393271368146100825763ddbdba63146100585780610011565b3461001a57602036600319011261001a573560005260006020526020604060002054604051908152f35b503461001a57604036600319011261001a57803560243580151580910361001a578160005260006020526040600020549283156100f85750816000526000602052600060408120556040519081527f0dcc0fb56a30b6fe6b188f45b47369bc7f3c928a9748e245a79fc3f54ddd056860203392a4005b60649060206040519162461bcd60e51b83528201526013602482015272436f756c64206e6f7420676574206e6f6e636560681b6044820152fd5b503461001a5761016036600319011261001a5780356001600160a01b03808216820361001a5767ffffffffffffffff9160443583811161001a576101799036908601610453565b906002606435101561001a5760e4359280841680940361001a5761010480359582871680970361001a576101243590811161001a576101bb9036908901610453565b9461014494853595848716870361001a5760405163057ff68760e51b81529860208a8c81335afa998a156103745760009a610395575b5060018a10610380579061023598999a6020926040519a8b938493631b1a23ef60e31b85528a8c1690850152602435602485015261014060448501528301866104aa565b90610245606484016064356104fb565b6084359788608485015260a43560a485015260c435978860c486015260e48501528301526000198d016101248301520381335afa96871561037457600097610332575b5091869761030b926102d886957fa65fef32cd19a6639a4bf7a6d196f132c151e4f0bbd2706f7f831b3a778e1ac098976040519816885260243560208901526101208060408a01528801906104aa565b926102e8606088016064356104fb565b6080870152151560a08601526000198a0160c086015284820360e08601526104aa565b93166101008201528033930390a36000526000602052600019016040600020556000604051f35b919493929096506020823d60201161036c575b816103526020938361041b565b8101031261001a57905195929391929091906102d8610288565b3d9150610345565b6040513d6000823e3d90fd5b60118b634e487b7160e01b6000525260246000fd5b9099506020813d6020116103c1575b816103b16020938361041b565b8101031261001a575198386101f1565b3d91506103a4565b823461001a57602036600319011261001a57359063ffffffff60e01b821680920361001a5760209163736bd41d60e11b811490811561040a575b5015158152f35b6301ffc9a760e01b14905083610403565b90601f8019910116810190811067ffffffffffffffff82111761043d57604052565b634e487b7160e01b600052604160045260246000fd5b81601f8201121561001a5780359067ffffffffffffffff821161043d5760405192610488601f8401601f19166020018561041b565b8284526020838301011161001a57816000926020809301838601378301015290565b91908251928382526000905b8482106104e35750928060209394116104d6575b601f01601f1916010190565b60008382840101526104ca565b906020908180828501015190828601015201906104b6565b9060028210156105085752565b634e487b7160e01b600052602160045260246000fdfea26469706673582212203413f19ea4a68f604ba622106467a41f40daf0753cc45562908713671e0f928864736f6c634300080f0033";

type DebugTransactionGuardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugTransactionGuardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugTransactionGuard__factory extends ContractFactory {
  constructor(...args: DebugTransactionGuardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DebugTransactionGuard> {
    return super.deploy(overrides || {}) as Promise<DebugTransactionGuard>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugTransactionGuard {
    return super.attach(address) as DebugTransactionGuard;
  }
  override connect(signer: Signer): DebugTransactionGuard__factory {
    return super.connect(signer) as DebugTransactionGuard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugTransactionGuardInterface {
    return new utils.Interface(_abi) as DebugTransactionGuardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DebugTransactionGuard {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DebugTransactionGuard;
  }
}
