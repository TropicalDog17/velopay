/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SimulateTxAccessor,
  SimulateTxAccessorInterface,
} from "../SimulateTxAccessor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "simulate",
    outputs: [
      {
        internalType: "uint256",
        name: "estimate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a08060405234610023573060805261032190816100298239608051816101720152f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c631c5fb2111461002857600080fd5b346100b75760803660031901126100b757600435906001600160a01b03821682036100b7576044359167ffffffffffffffff918284116100b757366023850112156100b75783600401359283116100b75736602484860101116100b7576100b36100a485858560246100986100ba565b9301906024359061016d565b604093919351938493846100ce565b0390f35b80fd5b6064359060028210156100c957565b600080fd5b91909392938252602090151581830152606060408301528351908160608401526000945b82861061011f575050806080939411610112575b601f01601f1916010190565b6000838284010152610106565b85810182015184870160800152948101946100f2565b50634e487b7160e01b600052604160045260246000fd5b818110610157570390565b634e487b7160e01b600052601160045260246000fd5b9493307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461023e575a955a9267ffffffffffffffff91828711610231575b60405192601f8801601f19908116603f0116840190811184821017610224575b60405286835236878701116100c9576000602088610206996101fe9983880137850101526102a5565b925a9061014c565b906040519160203d8401016040523d83523d6000602085013e929190565b61022c610135565b6101d5565b610239610135565b6101b5565b60405162461bcd60e51b815260206004820152603960248201527f53696d756c61746554784163636573736f722073686f756c64206f6e6c792062604482015278194818d85b1b1959081d9a584819195b1959d85d1958d85b1b603a1b6064820152608490fd5b93909360028410156102d55760009485946001036102c9575060208351930191f490565b9060208451940192f190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212203e1b09799d20e6fada94ec3032a1ae599a80934e67b291737420038ac3be7c7064736f6c634300080f0033";

type SimulateTxAccessorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimulateTxAccessorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimulateTxAccessor__factory extends ContractFactory {
  constructor(...args: SimulateTxAccessorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimulateTxAccessor> {
    return super.deploy(overrides || {}) as Promise<SimulateTxAccessor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimulateTxAccessor {
    return super.attach(address) as SimulateTxAccessor;
  }
  override connect(signer: Signer): SimulateTxAccessor__factory {
    return super.connect(signer) as SimulateTxAccessor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimulateTxAccessorInterface {
    return new utils.Interface(_abi) as SimulateTxAccessorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimulateTxAccessor {
    return new Contract(address, _abi, signerOrProvider) as SimulateTxAccessor;
  }
}
