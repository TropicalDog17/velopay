/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  OnlyOwnersGuard,
  OnlyOwnersGuardInterface,
} from "../OnlyOwnersGuard";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "checkAfterExecution",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "checkTransaction",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "safe",
    outputs: [
      {
        internalType: "contract ISafe",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576103ff908161001c8239f35b600080fdfe608080604052600436101561001c575b503461001757005b600080fd5b600090813560e01c90816301ffc9a71461014757508063186f03541461012057806375f0bb52146100755763932713680361000f5734610072576040366003190112610072576024358015150361007257604051f35b80fd5b503461007257610160366003190112610072576001600160a01b03600435818116036101145767ffffffffffffffff60443581811161011c576100bc9036906004016101d4565b50600260643510156101185760e435828116036101185761010435828116036101185761012435908111610118576100f89036906004016101d4565b506101443590811681036101145761010f9061022b565b604051f35b5080fd5b8280fd5b8380fd5b5034610072578060031936011261007257546040516001600160a01b039091168152602090f35b9050346101145760203660031901126101145760043563ffffffff60e01b8116809103610118576020925063736bd41d60e11b811490811561018b575b5015158152f35b6301ffc9a760e01b14905038610184565b90601f8019910116810190811067ffffffffffffffff8211176101be57604052565b634e487b7160e01b600052604160045260246000fd5b81601f820112156100175780359067ffffffffffffffff82116101be5760405192610209601f8401601f19166020018561019c565b8284526020838301011161001757816000926020809301838601378301015290565b60405163a0e67e2b60e01b8152916000916004919083858481335afa9485156103be5784956102f8575b50835b85518110156102aa57600581901b8601602001516001600160a01b038381169116146102a257600019811461028f57600101610258565b634e487b7160e01b855260118452602485fd5b505092505050565b60405162461bcd60e51b8152602081860152602160248201527f6d73672073656e646572206973206e6f7420616c6c6f77656420746f206578656044820152606360f81b6064820152608490fd5b9094503d8085833e61030a818361019c565b810160209081838203126103ba57825167ffffffffffffffff9384821161039f570181601f820112156103b65780519384116103a3578360051b90604051946103558584018761019c565b8552838086019282010192831161039f578301905b82821061037c57505050509338610255565b81516001600160a01b038116810361039b57815290830190830161036a565b8880fd5b8780fd5b634e487b7160e01b875260418652602487fd5b8680fd5b8580fd5b6040513d86823e3d90fdfea264697066735822122002571e99912bc72ceeee2264878c33406a0bf0ca2cbffeec283235574d0dcc7f64736f6c634300080f0033";

type OnlyOwnersGuardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnlyOwnersGuardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnlyOwnersGuard__factory extends ContractFactory {
  constructor(...args: OnlyOwnersGuardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnlyOwnersGuard> {
    return super.deploy(overrides || {}) as Promise<OnlyOwnersGuard>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OnlyOwnersGuard {
    return super.attach(address) as OnlyOwnersGuard;
  }
  override connect(signer: Signer): OnlyOwnersGuard__factory {
    return super.connect(signer) as OnlyOwnersGuard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnlyOwnersGuardInterface {
    return new utils.Interface(_abi) as OnlyOwnersGuardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnlyOwnersGuard {
    return new Contract(address, _abi, signerOrProvider) as OnlyOwnersGuard;
  }
}
