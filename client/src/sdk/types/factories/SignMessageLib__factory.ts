/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SignMessageLib,
  SignMessageLibInterface,
} from "../SignMessageLib";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
    ],
    name: "SignMsg",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "signMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576102d4908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630a1028c4146100d1576385a5affe1461003357600080fd5b346100ce5760203660031901126100ce5760043567ffffffffffffffff8082116100ca57366023830112156100ca5781600401359081116100ca5736602482840101116100ca576100919161008c916024369201610158565b6101a4565b808252600760205260016040832055604051907fe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e48383a2f35b8280fd5b80fd5b50346100ce5760203660031901126100ce576004359067ffffffffffffffff82116100ce57366023830112156100ce57602061011861008c36600486013560248701610158565b604051908152f35b90601f8019910116810190811067ffffffffffffffff82111761014257604052565b634e487b7160e01b600052604160045260246000fd5b92919267ffffffffffffffff82116101425760405191610182601f8201601f191660200184610120565b82948184528183011161019f578281602093846000960137010152565b600080fd5b805160208092012090604091825192828401917f60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca8352818501528084526060840167ffffffffffffffff9285821084831117610142578183528551902063f698da2560e01b8252908481600481305afa95861561029357600096610261575b5050815193840194601960f81b8652600160f81b60218601526022850152604284015260428352608083019183831090831117610142575251902090565b859081979293973d831161028c575b61027a8186610120565b810103126100ce575051933880610223565b503d610270565b83513d6000823e3d90fdfea26469706673582212204f2601b6972d7e57ae2dfb1bd74f88de0f5a7e2efefce60ebfa482b53278694c64736f6c634300080f0033";

type SignMessageLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignMessageLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignMessageLib__factory extends ContractFactory {
  constructor(...args: SignMessageLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SignMessageLib> {
    return super.deploy(overrides || {}) as Promise<SignMessageLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignMessageLib {
    return super.attach(address) as SignMessageLib;
  }
  override connect(signer: Signer): SignMessageLib__factory {
    return super.connect(signer) as SignMessageLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignMessageLibInterface {
    return new utils.Interface(_abi) as SignMessageLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignMessageLib {
    return new Contract(address, _abi, signerOrProvider) as SignMessageLib;
  }
}
